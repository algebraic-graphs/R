// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"

// testcpp.cpp
int test_baseline_();
extern "C" SEXP _progresstestcpp_test_baseline_() {
  BEGIN_CPP11
    return cpp11::as_sexp(test_baseline_());
  END_CPP11
}
// testcpp.cpp
int test_cli_();
extern "C" SEXP _progresstestcpp_test_cli_() {
  BEGIN_CPP11
    return cpp11::as_sexp(test_cli_());
  END_CPP11
}
// testcpp.cpp
int test_template_();
extern "C" SEXP _progresstestcpp_test_template_() {
  BEGIN_CPP11
    return cpp11::as_sexp(test_template_());
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _progresstestcpp_test_baseline_();
extern SEXP _progresstestcpp_test_cli_();
extern SEXP _progresstestcpp_test_template_();

static const R_CallMethodDef CallEntries[] = {
    {"_progresstestcpp_test_baseline_", (DL_FUNC) &_progresstestcpp_test_baseline_, 0},
    {"_progresstestcpp_test_cli_",      (DL_FUNC) &_progresstestcpp_test_cli_,      0},
    {"_progresstestcpp_test_template_", (DL_FUNC) &_progresstestcpp_test_template_, 0},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_progresstestcpp(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
